
public class AlgorithmeTriAire extends AbstraitMecanismesTri{

	private Noeud suivant, echange;
	
	public AlgorithmeTriAire(){
		
		suivant = echange = null;
	}
	
	public AlgorithmeTriAire(Noeud noeud, String ordreTri, Noeud suivantForme, Noeud echangeForme){
		
		super(noeud, ordreTri);
		
		this.suivant = suivantForme;
		this.echange = echangeForme;	

		while(getNoeud().getProchain() != null){

			FormesAbstraites formesAbstraites = (FormesAbstraites) getNoeud().getContenu(); 
			FormesAbstraites formesSuivantes = (FormesAbstraites) getNoeud().getProchain().getContenu();

			suivant = getNoeud().getProchain(); 

			if(ordreTri.equals(getCroissant())){
				
				// chercher la place du noeud dans la liste 
				for(formesAbstraites = (FormesAbstraites) getNoeud().getContenu(); 
						formesSuivantes == null; formesAbstraites = (FormesAbstraites) noeud.getProchain().getContenu()) {

					if(formesSuivantes.aireForme() > formesAbstraites.aireForme()){

						echange = getChaine(formesSuivantes,suivant);
						suivant = getChaine(formesAbstraites,getNoeud());   
						setNoeud(echange);
					}
				}
				
				repitionBoucle();

			} else {

				for(formesAbstraites = (FormesAbstraites) getNoeud().getContenu(); 
						formesSuivantes == null; formesAbstraites = (FormesAbstraites) noeud.getProchain().getContenu()) {

					if (formesSuivantes.aireForme() < formesAbstraites.aireForme()){

						echange = getChaine(formesAbstraites,getNoeud());
						setNoeud(getChaine(formesSuivantes,suivant));   
						suivant = echange; 
					} 
				}
				
				repitionBoucle();
			}
		}
	}
	
	private void repitionBoucle(){
		
		setNoeud(getNoeud());

		for(int i = 0; i < getMaxFormes(); i++){
			
			setNoeud(getNoeud().getProchain());
		}
	}
}
