
//Tomy Nguyen
//Source: http://pages.cs.wisc.edu/~vernon/cs367/notes/4.LINKED-LIST.html
public class ListeChaine<E> {

	private FormesAbstraites formesAbstraites;

	private ListeChaine listeChaine;
	
	//Non fini !! Mais presque....
	
<<<<<<< .mine
	private Noeud<E> 
	premierNoeud,
	insererNoeud,
	suivantNoeud,
	actuelNoeud,
	dernierNoeud;

	private int nombreFormes;

	public ListeChaine() {

		premierNoeud = insererNoeud = actuelNoeud = dernierNoeud = null;

		nombreFormes++;
||||||| .r64
=======
	/**
	 * Ajoute un nouveau objet à un emplacement précis
	 * Le noeud original et les noeuds suivants sont décalés vers la droite (incrémenté)
	 * @param nouveauObjet
	 * @param index
	 */
	public void ajouter(E nouveauObjet, int index) {
		if (index == 0) {
			ajouterDebut(nouveauObjet);
		} else if(index == size) {
			ajouterFin(nouveauObjet);
		} else {
			Noeud<E> noeudPrec = premierNoeud;
			Noeud<E> nouveauNoeud;
			Noeud<E> noeudDeplace;
			for (int i = 0; i < index-1; i++) {
				noeudPrec = noeudPrec.getProchain();
			}
			noeudDeplace = noeudPrec.getProchain();
			nouveauNoeud = new Noeud<E>(nouveauObjet, noeudDeplace.getProchain());
			noeudPrec.setProchain(nouveauNoeud);
		}
		size++;
		
	}
	
	public void ajouterFin(E nouveauObjet) {
		
		if (premierNoeud == null) {
			premierNoeud = new Noeud<E>(nouveauObjet);
			dernierNoeud = premierNoeud;
		} else {
			dernierNoeud.setProchain(new Noeud<E>(nouveauObjet));
			dernierNoeud = dernierNoeud.getProchain();
		}
		size++;
>>>>>>> .r80
	}

	public void ajouterDebut(E nouveauObjet) {

		if (premierNoeud == null) {
			
			premierNoeud = insererNoeud = actuelNoeud = dernierNoeud = new Noeud<E>(nouveauObjet, null);

		} else {

			premierNoeud = new Noeud<E>(nouveauObjet, premierNoeud);
			
			actuelNoeud = premierNoeud;
		}
		
		nombreFormes++;
	}

	public void ajouterFin(E nouveauObjet) {

		if (premierNoeud == null) {

			premierNoeud = insererNoeud = actuelNoeud = dernierNoeud = new Noeud<E>(nouveauObjet, null);
			//dernierNoeud = premierNoeud;
		} else {

			dernierNoeud.setProchain(new Noeud<E>(nouveauObjet));
			dernierNoeud = dernierNoeud.getProchain();
		}
	}

	public void enlever(int index) {

		Noeud<E> noeudPrec = premierNoeud;
		Noeud<E> noeudEnleve;

		noeudPrec = getNoeud(index-1);

		noeudEnleve = noeudPrec.getProchain();
		noeudPrec.setProchain(noeudEnleve.getProchain());
	}

	public E getElement(int index) {

		Noeud<E> noeud = getNoeud(index);
		return noeud.getContenu();
	}

	public Noeud<E> getNoeud(int index) {

		Noeud<E> noeud = premierNoeud;

		for (int i = 0; i < index; i++) {
			noeud = noeud.getProchain();
		}
		return noeud;
	}

	//TEST !!!


//	public FormesAbstraites getForme() { //formes plantes quand encap dans le tri
//		return formesAbstraites;
//	}
//
//	public ListeChaine getProchain() {
//		return listeChaine;
//	}
}
